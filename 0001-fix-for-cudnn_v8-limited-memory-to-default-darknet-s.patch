From 816ec5889d7f43a3486021868096ec5576b9eb09 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Fri, 10 Jul 2020 12:15:07 +0800
Subject: [PATCH] fix for cudnn_v8 (limited memory to default darknet setting)

---
 src/convolutional_layer.c | 74 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 74 insertions(+)

diff --git a/src/convolutional_layer.c b/src/convolutional_layer.c
index 1fb58b0..f950c01 100644
--- a/src/convolutional_layer.c
+++ b/src/convolutional_layer.c
@@ -8,6 +8,9 @@
 #include <stdio.h>
 #include <time.h>
 
+#define PRINT_CUDNN_ALGO 0
+#define MEMORY_LIMIT 2000000000
+
 #ifdef AI2
 #include "xnor_layer.h"
 #endif
@@ -145,6 +148,76 @@ void cudnn_convolutional_setup(layer *l)
     }
     #endif
 
+    #if CUDNN_MAJOR >= 8
+    int returnedAlgoCount;
+    cudnnConvolutionFwdAlgoPerf_t       fw_results[2 * CUDNN_CONVOLUTION_FWD_ALGO_COUNT];
+    cudnnConvolutionBwdDataAlgoPerf_t   bd_results[2 * CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT];
+    cudnnConvolutionBwdFilterAlgoPerf_t bf_results[2 * CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT];
+
+    cudnnFindConvolutionForwardAlgorithm(cudnn_handle(),
+            l->srcTensorDesc,
+            l->weightDesc,
+            l->convDesc,
+            l->dstTensorDesc,
+            CUDNN_CONVOLUTION_FWD_ALGO_COUNT,
+            &returnedAlgoCount,
+	    fw_results);
+    for(int algoIndex = 0; algoIndex < returnedAlgoCount; ++algoIndex){
+        #if PRINT_CUDNN_ALGO > 0
+        printf("^^^^ %s for Algo %d: %f time requiring %llu memory\n",
+               cudnnGetErrorString(fw_results[algoIndex].status),
+               fw_results[algoIndex].algo, fw_results[algoIndex].time,
+               (unsigned long long)fw_results[algoIndex].memory);
+        #endif
+        if( fw_results[algoIndex].memory < MEMORY_LIMIT ){
+            l->fw_algo = fw_results[algoIndex].algo;
+            break;
+	}
+    }
+
+    cudnnFindConvolutionBackwardDataAlgorithm(cudnn_handle(),
+            l->weightDesc,
+            l->ddstTensorDesc,
+            l->convDesc,
+            l->dsrcTensorDesc,
+            CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT,
+            &returnedAlgoCount,
+            bd_results);
+    for(int algoIndex = 0; algoIndex < returnedAlgoCount; ++algoIndex){
+        #if PRINT_CUDNN_ALGO > 0
+        printf("^^^^ %s for Algo %d: %f time requiring %llu memory\n",
+               cudnnGetErrorString(bd_results[algoIndex].status),
+               bd_results[algoIndex].algo, bd_results[algoIndex].time,
+               (unsigned long long)bd_results[algoIndex].memory);
+        #endif
+        if( bd_results[algoIndex].memory < MEMORY_LIMIT ){
+            l->bd_algo = bd_results[algoIndex].algo;
+            break;
+        }
+    }
+
+    cudnnFindConvolutionBackwardFilterAlgorithm(cudnn_handle(),
+            l->srcTensorDesc,
+            l->ddstTensorDesc,
+            l->convDesc,
+            l->dweightDesc,
+            CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT,
+            &returnedAlgoCount,
+            bf_results);
+    for(int algoIndex = 0; algoIndex < returnedAlgoCount; ++algoIndex){
+        #if PRINT_CUDNN_ALGO > 0
+        printf("^^^^ %s for Algo %d: %f time requiring %llu memory\n",
+               cudnnGetErrorString(bf_results[algoIndex].status),
+               bf_results[algoIndex].algo, bf_results[algoIndex].time,
+               (unsigned long long)bf_results[algoIndex].memory);
+        #endif
+        if( bf_results[algoIndex].memory < MEMORY_LIMIT ){
+            l->bf_algo = bf_results[algoIndex].algo;
+            break;
+        }
+    }
+
+    #else
     cudnnGetConvolutionForwardAlgorithm(cudnn_handle(),
             l->srcTensorDesc,
             l->weightDesc,
@@ -169,6 +242,7 @@ void cudnn_convolutional_setup(layer *l)
             CUDNN_CONVOLUTION_BWD_FILTER_SPECIFY_WORKSPACE_LIMIT,
             2000000000,
             &l->bf_algo);
+    #endif
 }
 #endif
 #endif
-- 
2.17.1

